Import("md5");Import("pbkdf2");Import("ripemd160");Import("sha1");Import("sha3");Import("sha224");Import("sha256");Import("sha384");Import("hmac-md5");Import("hmac-ripemd160");Import("hmac-sha1");Import("hmac-sha3");Import("hmac-sha224");Import("hmac-sha256");Import("hmac-sha384");Import("hmac-sha512");Import("hmac-sha384");Import("aes");Import("tripledes");Import("rabbit");Import("rc4");function toString(a){return a=a.toString()}function toInt(a){return parseInt(a)}
function Import(a){return document.write('<script src="cryptojs/rollups/'+a+'.js">\x3c/script>')}function MD5(a){Import("md5");return CryptoJS.MD5(toString(a))}function PBKDF2(a,c){var b=CryptoJS.lib.WordArray.random(16);switch(toInt(c)){case 128:b=CryptoJS.PBKDF2(toString(a),b,{keySize:4});break;case 256:b=CryptoJS.PBKDF2(toString(a),b,{keySize:8});break;case 512:b=CryptoJS.PBKDF2(toString(a),b,{keySize:16});break;default:return 0}return b}
function RIPEMD160(a){return CryptoJS.RIPEMD160(toString(a))}function SHA1(a){return CryptoJS.SHA1(toString(a))}function SHA3(a,c){if(void 0===c)var b=CryptoJS.SHA3(toString(a));else switch(toInt(c)){case 224:b=CryptoJS.SHA3(toString(a),{outputLength:224});break;case 256:b=CryptoJS.SHA3(toString(a),{outputLength:256});break;case 384:b=CryptoJS.SHA3(toString(a),{outputLength:384});break;case 512:b=CryptoJS.SHA3(toString(a),{outputLength:512});break;default:return 0}return b}
function SHA224(a){return CryptoJS.SHA224(toString(a))}function SHA256(a){return CryptoJS.SHA256(toString(a))}function SHA384(a){return CryptoJS.SHA384(toString(a))}function SHA512(a){return CryptoJS.SHA512(toString(a))}
function Hmac(a,c,b){switch(a){case "MD5":a=CryptoJS.HmacMD5(toString(c),toString(b));break;case "RIPEMD160":a=CryptoJS.HmacRIPEMD160(toString(c),toString(b));break;case "SHA1":a=CryptoJS.HmacSHA1(toString(c),toString(b));break;case "SHA3":a=CryptoJS.HmacSHA3(toString(c),toString(b));break;case "SHA224":a=CryptoJS.HmacSHA224(toString(c),toString(b));break;case "SHA256":a=CryptoJS.HmacSHA256(toString(c),toString(b));break;case "SHA384":a=CryptoJS.HmacSHA384(toString(c),toString(b));break;default:return 0}return a}
var AES=function(){};AES.prototype.encyption=function(a,c,b){void 0===c&&void 0===b&&(c=CryptoJS.lib.WordArray.random(8),b=CryptoJS.lib.WordArray.random(8));var d=CryptoJS.enc.Utf8.parse(c),e=CryptoJS.enc.Utf8.parse(b);a=CryptoJS.AES.encrypt(a,d,{iv:e,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return{key:toString(c),iv:toString(b),hash:toString(a)}};
AES.prototype.decyption=function(a,c,b){a=CryptoJS.enc.Utf8.parse(a);c=CryptoJS.enc.Utf8.parse(c);b=toString(b);a=CryptoJS.AES.decrypt(b,a,{iv:c,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return a=CryptoJS.enc.Utf8.stringify(a)};var DES=function(){};
DES.prototype.encyption=function(a,c,b){void 0===c&&void 0===b&&(c=CryptoJS.lib.WordArray.random(8),b=CryptoJS.lib.WordArray.random(8));var d=CryptoJS.enc.Utf8.parse(c),e=CryptoJS.enc.Utf8.parse(b);a=CryptoJS.AES.encrypt(a,d,{iv:e,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return{key:toString(c),iv:toString(b),hash:toString(a)}};
DES.prototype.decyption=function(a,c,b){a=CryptoJS.enc.Utf8.parse(a);c=CryptoJS.enc.Utf8.parse(c);b=toString(b);a=CryptoJS.AES.decrypt(b,a,{iv:c,mode:CryptoJS.mode.CBC,padding:CryptoJS.pad.Pkcs7});return a=CryptoJS.enc.Utf8.stringify(a)};var Rabbit=function(){};
Rabbit.prototype.encyption=function(a,c,b){void 0===c&&void 0===b&&(c=CryptoJS.lib.WordArray.random(8),b=CryptoJS.lib.WordArray.random(8));var d=CryptoJS.enc.Utf8.parse(c),e=CryptoJS.enc.Utf8.parse(b);a=CryptoJS.Rabbit.encrypt(a,d,{iv:e});return{key:toString(c),iv:toString(b),hash:toString(a)}};Rabbit.prototype.decyption=function(a,c,b){a=CryptoJS.enc.Utf8.parse(a);c=CryptoJS.enc.Utf8.parse(c);a=CryptoJS.Rabbit.decrypt(b,a,{iv:c});return a=CryptoJS.enc.Utf8.stringify(a)};var RC4=function(){};
RC4.prototype.encyption=function(a,c,b){void 0===c&&void 0===b&&(c=CryptoJS.lib.WordArray.random(8),b=CryptoJS.lib.WordArray.random(8));var d=CryptoJS.enc.Utf8.parse(c),e=CryptoJS.enc.Utf8.parse(b);a=CryptoJS.RC4.encrypt(a,d,{iv:e});return{key:toString(c),iv:toString(b),hash:toString(a)}};RC4.prototype.decyption=function(a,c,b){a=CryptoJS.enc.Utf8.parse(a);c=CryptoJS.enc.Utf8.parse(c);a=CryptoJS.RC4.decrypt(b,a,{iv:c});return a=CryptoJS.enc.Utf8.stringify(a)};